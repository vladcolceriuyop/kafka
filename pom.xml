<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.2.3.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>kafka</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>kafka</name>
	<description>Demo project for Spring Boot</description>

	<properties>
		<project.basedir.src>${project.basedir}/src</project.basedir.src>
		<project.basedir.src.docker>${project.basedir.src}/docker</project.basedir.src.docker>
		<java.version>11</java.version>
		<postgres.version>latest</postgres.version>
		<postgres.timeout>20000</postgres.timeout>
		<bit.kafka.version>latest</bit.kafka.version>
		<bit.kafka.timeout>20000</bit.kafka.timeout>
		<bit.zookeeper.version>latest</bit.zookeeper.version>
		<bit.zookeeper.timeout>20000</bit.zookeeper.timeout>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>kafka-streams</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.flywaydb</groupId>
				<artifactId>flyway-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.32.0</version>
				<extensions>true</extensions>
				<configuration>
					<useColor>true</useColor>
					<autoCreateCustomNetworks>true</autoCreateCustomNetworks>
					<images>
                        <image>
                            <alias>kafka-db</alias>
                            <name>postgres:${postgres.version}</name>
                            <run>
								<network>
									<mode>custom</mode>
									<name>kafka-network</name>
									<alias>kafka-db</alias>
								</network>
								<env>
									<POSTGRES_USER>postgres</POSTGRES_USER>
									<POSTGRES_DB>postgres</POSTGRES_DB>
									<KAFKA_USER>postgres</KAFKA_USER>
									<KAFKA_DB>kafka_db</KAFKA_DB>
								</env>
								<volumes>
									<bind>
										<volume>dev/postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d</volume>
									</bind>
								</volumes>
								<ports>
									<port>5432:5432</port>
								</ports>
                                <wait>
                                    <log>database system is ready to accept connections</log>
                                    <time>${postgres.timeout}</time>
                                </wait>
                            </run>
                        </image>
						<image>
							<alias>zookeeper</alias>
							<name>bitnami/zookeeper:${bit.zookeeper.version}</name>
							<run>
								<ports>
									<port>2181:2181</port>
								</ports>
								<env>
									<ALLOW_ANONYMOUS_LOGIN>yes</ALLOW_ANONYMOUS_LOGIN>
								</env>
								<network>
									<mode>custom</mode>
									<name>kafka-network</name>
									<alias>kafka-zookeeper</alias>
								</network>
								<wait>
									<tcp>
										<mode>mapped</mode>
										<ports>
											<port>2181</port>
										</ports>
									</tcp>
									<time>${bit.zookeeper.timeout}</time>
								</wait>
							</run>
						</image>
						<image>
							<alias>kafka-kafka</alias>
							<name>bitnami/kafka:${bit.kafka.version}</name>
							<run>
								<env>
									<ALLOW_PLAINTEXT_LISTENER>yes</ALLOW_PLAINTEXT_LISTENER>
									<KAFKA_CFG_ZOOKEEPER_CONNECT>kafka-zookeeper:2181</KAFKA_CFG_ZOOKEEPER_CONNECT>
									<KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP>PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT</KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP>
									<KAFKA_CFG_LISTENERS>PLAINTEXT://:9092,PLAINTEXT_HOST://:29092</KAFKA_CFG_LISTENERS>
									<KAFKA_CFG_ADVERTISED_LISTENERS>PLAINTEXT://kafka-kafka:9092,PLAINTEXT_HOST://localhost:29092</KAFKA_CFG_ADVERTISED_LISTENERS>
								</env>
								<network>
									<mode>custom</mode>
									<name>kafka-network</name>
									<alias>kafka-kafka</alias>
								</network>
								<ports>
									<port>9092:9092</port>
									<port>29092:29092</port>
								</ports>
								<wait>
									<tcp>
										<mode>mapped</mode>
										<ports>
											<port>9092</port>
										</ports>
									</tcp>
									<time>${bit.zookeeper.timeout}</time>
								</wait>
								<dependsOn>
									<container>zookeeper</container>
								</dependsOn>
							</run>
						</image>
						<image>
							<alias>kafka-ui</alias>
							<name>obsidiandynamics/kafdrop</name>
							<run>
								<env>
									<KAFKA_BROKERCONNECT>kafka-kafka:9092</KAFKA_BROKERCONNECT>
									<JVM_OPTS>-Xms32M -Xmx64M</JVM_OPTS>
									<SERVER_SERVLET_CONTEXTPATH>/</SERVER_SERVLET_CONTEXTPATH>
								</env>
								<ports>
									<port>9000:9000</port>
								</ports>
								<network>
									<mode>custom</mode>
									<name>kafka-network</name>
									<alias>kafka-ui</alias>
								</network>
								<dependsOn>
									<container>kafka-kafka</container>
								</dependsOn>
							</run>
						</image>
						<image>
							<alias>kafka-client</alias>
							<name>vladcolceriuklar/kafka-client</name>
							<build>
								<from>adoptopenjdk/openjdk11</from>
								<assembly>
									<name>kafka-client</name>
									<inline>
										<includeBaseDirectory>false</includeBaseDirectory>
										<files>
											<file>
												<source>${project.build.directory}/${project.build.finalName}.jar</source>
												<outputDirectory>/</outputDirectory>
												<fileMode>0755</fileMode>
											</file>
											<file>
												<source>${project.build.outputDirectory}/application.properties</source>
												<outputDirectory>/</outputDirectory>
												<fileMode>0644</fileMode>
											</file>
										</files>
									</inline>
								</assembly>
								<ports>
									<port>8081/tcp</port>
								</ports>
								<cmd>
									bash
								</cmd>
								<entryPoint>
									<exec>
										<arg>java</arg>
										<arg>-jar</arg>
										<arg>/kafka-client/kafka-0.0.1-SNAPSHOT.jar</arg>
<!--										<arg>-XX:TieredStopAtLevel=1</arg>-->
<!--										<arg>-noverify</arg>-->
<!--										<arg>-Dspring.output.ansi.enabled=always</arg>-->
<!--										<arg>-Dcom.sun.management.jmxremote</arg>-->
<!--										<arg>-Dspring.jmx.enabled=true</arg>-->
<!--										<arg>-Dspring.liveBeansView.mbeanDomain</arg>-->
<!--										<arg>-Dspring.application.admin.enabled=true</arg>-->
<!--										<arg>-Dfile.encoding=UTF-8</arg>-->
									</exec>
								</entryPoint>
							</build>
							<run>
								<ports>
									<port>8081:8081</port>
								</ports>
								<network>
									<mode>custom</mode>
									<name>kafka-network</name>
									<alias>kafka-client</alias>
								</network>
								<dependsOn>
									<container>kafka-kafka</container>
									<container>kafka-db</container>
								</dependsOn>
							</run>
						</image>
					</images>
				</configuration>
				<executions>
					<execution>
						<id>docker-build</id>
						<goals>
							<goal>build</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>
